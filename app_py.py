# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1094agxezIJUsCqy8wH2d5pw4XewJv1E-
"""

import gradio as gr
import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.preprocessing import LabelEncoder
from datetime import datetime

# Dummy model for demo
model = xgb.XGBClassifier()
model.fit(np.random.rand(100, 5), np.random.randint(0, 2, 100))

# Encode gender
gender_encoder = LabelEncoder()
gender_encoder.fit(["Male", "Female"])

twin_log = []

def predict_diabetes(age, gender, bmi, bp, hba1c):
    gender_encoded = gender_encoder.transform([gender])[0]
    input_data = pd.DataFrame([[age, gender_encoded, bmi, bp, hba1c]],
                              columns=["age", "gender", "bmi", "bp", "hba1c"])
    pred_prob = model.predict_proba(input_data)[0][1]
    prediction = "Diabetic" if pred_prob > 0.5 else "Non-Diabetic"

    twin_log.append({
        "Time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "Age": age, "Gender": gender,
        "BMI": bmi, "BloodPressure": bp,
        "HbA1c": hba1c, "Prediction": prediction
    })
    log_df = pd.DataFrame(twin_log[::-1])
    return f"Prediction: {prediction} (Confidence: {pred_prob:.2f})", log_df

with gr.Blocks() as demo:
    gr.Markdown("## Digital Twin - Diabetes Prediction Simulator")
    with gr.Row():
        with gr.Column():
            age = gr.Slider(1, 100, value=40, label="Age")
            gender = gr.Radio(["Male", "Female"], label="Gender")
            bmi = gr.Slider(10.0, 50.0, step=0.1, value=25.0, label="BMI")
            bp = gr.Slider(60, 180, value=120, label="Blood Pressure")
            hba1c = gr.Slider(4.0, 15.0, step=0.1, value=6.5, label="HbA1c")
            submit = gr.Button("Submit")
        with gr.Column():
            output = gr.Textbox(label="Prediction Result")
            log = gr.Dataframe(label="Twin Log", interactive=False)
    submit.click(predict_diabetes, inputs=[age, gender, bmi, bp, hba1c], outputs=[output, log])

demo.launch()

